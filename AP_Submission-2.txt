2. ADD TWO NUMBERS:
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
     ListNode d = new ListNode(0);
        ListNode current = d;
        int carry = 0;

        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry;
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            carry = sum / 10;
            current.next = new ListNode(sum % 10);
            current = current.next;
        }

        return d.next;    
    }
}

21. MERGE TWO SORTED LISTS:
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
    ListNode d = new ListNode(0);
        ListNode current = d;
        ListNode l1 = list1;
        ListNode l2 = list2;
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next; 
        }
        if (l1 != null) {
            current.next = l1;
        } else if (l2 != null) {
            current.next = l2;
        }
        return d.next;    
    }
}

25. REVERSE NODES IN K-GROUP:
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
      ListNode Lavleen = new ListNode(0);
        Lavleen.next = head;
        ListNode a = Lavleen; 
        
        int count = 0;
        ListNode node = head;
        while (node != null) {
            count++;
            node = node.next;
        }
        while (count >= k) {
            node = a.next; 
            ListNode nextNode = node.next; 
            for (int i = 1; i < k; i++) {
                node.next = nextNode.next;
                nextNode.next = a.next;
                a.next = nextNode;
                nextNode = node.next;
            }
            a = node;
            count -= k;
        }
        
        return Lavleen.next;   
    }
}

141. LINKED LIST CYCLE:
public class Solution {
    public boolean hasCycle(ListNode head) {
    if (head == null || head.next == null) {
            return false;
        }
        
        ListNode slow = head;
        ListNode fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;          
            fast = fast.next.next;    
            
            if (slow == fast) {
                return true; 
            }
        }        
        return false;     
    }
}

206. REVERSE LINKED LIST:
class Solution {
    public ListNode reverseList(ListNode head) {
    ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode next = curr.next;  
            curr.next = prev;           
            prev = curr;               
            curr = next;               
        }
        return prev;    
    }
}

237. DELETE NODE IN A LINKED LIST:
class Solution {
    public void deleteNode(ListNode node) {
        node.val = node.next.val;
        node.next = node.next.next;    
    }
}

707. DESIGN LINKED LIST:
class MyLinkedList {
 private class ListNode {
        int val;
        ListNode next;
        ListNode(int val) {
            this.val = val;
            this.next = null;
        }
    }
    private ListNode head;
    private int size;
    public MyLinkedList() {
        head = null;
        size = 0;
    }

    public int get(int index) {
        if (index < 0 || index >= size) {
            return -1;  
        }
        ListNode current = head;
        for (int i = 0; i < index; i++) {
            current = current.next;
        }
        return current.val;
    }

    public void addAtHead(int val) {
        ListNode newNode = new ListNode(val);
        newNode.next = head;
        head = newNode;
        size++;
    }

    public void addAtTail(int val) {
        ListNode newNode = new ListNode(val);
        if (head == null) {
            head = newNode;
        } else {
            ListNode current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        size++;
    }

    public void addAtIndex(int index, int val) {
        if (index < 0 || index > size) {
            return;  // Invalid index
        }

        if (index == 0) {
            addAtHead(val);
            return;
        }

        ListNode newNode = new ListNode(val);
        ListNode current = head;
        for (int i = 0; i < index - 1; i++) {
            current = current.next;
        }

        newNode.next = current.next;
        current.next = newNode;
        size++;
    }

    public void deleteAtIndex(int index) {
        if (index < 0 || index >= size) {
            return;  // Invalid index
        }

        if (index == 0) {
            head = head.next;
        } else {
            ListNode current = head;
            for (int i = 0; i < index - 1; i++) {
                current = current.next;
            }

            current.next = current.next.next;
        }
        size--;
    }
}

1290. Convert Binary Number in a Linked List to Integer:
class Solution {
    public int getDecimalValue(ListNode head) {
        int result = 0;
        ListNode current = head;
        while (current != null) {
            result = result * 2 + current.val;  
            current = current.next;
        }
        return result;   
    }
}

2181. Merge Nodes in Between Zeros: 
class Solution {
    public ListNode mergeNodes(ListNode head) {
        if (head.next == null) return null;
        ListNode ptr = head.next;
        int sum = 0;
        while (ptr.val != 0) {
            sum += ptr.val;
            ptr = ptr.next;
        }
        head.next.val = sum;
        head.next.next = mergeNodes(ptr);
        return head.next;
    }
}

2326. SPIRAL MATRIX IV:
class Solution {
    public int[][] spiralMatrix(int m, int n, ListNode head) {
        int top = 0, right = n - 1;
        int left = 0, bottom = m - 1;

        int result[][] = new int[m][n];
        for(int arr[] : result) Arrays.fill(arr, -1);
        while(head != null && top <= bottom && left <= right) {
            for(int i = left; i <= right && head != null; i++) {
                result[top][i] = head.val;
                head = head.next;
            }
            top++;
            for(int i = top; i <= bottom && head != null; i++) {
                result[i][right] = head.val;
                head = head.next;
            }
            right--;
            if(top <= bottom) {
                for(int i = right; i >= left && head != null; i--) {
                    result[bottom][i] = head.val;
                    head = head.next;
                }
                bottom--;

            }
            if(left <= right) {
                for(int i = bottom; i >= top && head != null; i--) {
                    result[i][left] = head.val;
                    head = head.next;
                }
                left++;
            }

        }
        return result;
    }
}